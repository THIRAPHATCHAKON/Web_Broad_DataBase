/*
 * ==================================================================================
 * WEB BOARD DATABASE - BACKEND SERVER
 * ==================================================================================
 * 
 * üìã ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏™‡∏ô‡∏ó‡∏ô‡∏≤ (Web Board)
 * üîß ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ: Node.js + Express.js + Prisma (MySQL) + Mongoose (MongoDB)
 * üöÄ ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå: ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å, ‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ, ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå, ‡∏≠‡∏±‡∏õ‡πÇ‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå, ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô, ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * 
 * ==================================================================================
 */

// üì¶ ‡πÇ‡∏´‡∏•‡∏î dependencies ‡πÅ‡∏•‡∏∞ models ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
const Report = require("./models/Report");        // MongoDB model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
const express = require("express");               // Web framework ‡∏´‡∏•‡∏±‡∏Å
const cors = require("cors");                     // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Cross-Origin Resource Sharing
const path = require("path");                     // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå
const fs = require("fs");                         // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏∞‡∏ö‡∏ö
const cookieParser = require("cookie-parser");     // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ cookies
const multer = require("multer");                 // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
const { PrismaClient } = require("@prisma/client"); // ORM ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MySQL database
const bcrypt = require("bcryptjs");               // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
const jwt = require("jsonwebtoken");              // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT tokens
const rateLimit = require("express-rate-limit");   // ‚úÖ ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
const compression = require("compression");        // ‚úÖ ‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î
const helmet = require("helmet");                 // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏î‡πâ‡∏ß‡∏¢ HTTP headers

// üóÑÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Prisma Client ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MySQL (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å: users, threads, comments)
const prisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_URL // URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MySQL database
    }
  },
  // ‚úÖ Optimized logging: ‡πÅ‡∏™‡∏î‡∏á query ‡πÉ‡∏ô dev mode ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  log: process.env.NODE_ENV === 'development' ? ['query', 'info', 'warn', 'error'] : ['error']
});

// üöÄ ‡∏™‡∏£‡πâ‡∏≤‡∏á Express application
const app = express();

// üìä ‡πÇ‡∏´‡∏•‡∏î MongoDB model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ActivityLog
const ActivityLog = require("./models/ActivityLog");

// üçÉ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö reports ‡πÅ‡∏•‡∏∞ activity logs
const mongoose = require("mongoose");
mongoose.connect(process.env.MONGODB_URI || "mongodb://localhost:27017/miniforum");

/* ==================================================================================
 * üîí RATE LIMITING CONFIGURATION - ‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
 * ==================================================================================
 * ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå: ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡πÅ‡∏ö‡∏ö DDoS ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô API ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
 * ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏≤‡∏° endpoint ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô
 */

// üõ°Ô∏è General Rate Limiting - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (100 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÉ‡∏ô 15 ‡∏ô‡∏≤‡∏ó‡∏µ)
const generalLimiter = rateLimit({
  windowMs: 15 * 60 * 1000,   // ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤: 15 ‡∏ô‡∏≤‡∏ó‡∏µ
  max: 100,                   // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: 100 requests per IP
  message: {
    ok: false,
    message: "‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á" // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏ô‡∏•‡∏¥‡∏°‡∏¥‡∏ï
  },
  standardHeaders: true,      // ‡∏™‡πà‡∏á rate limit headers
  legacyHeaders: false,       // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ headers ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤
  skip: (req) => {
    // ‡∏Ç‡πâ‡∏≤‡∏° rate limiting ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö health check
    return req.path === '/api/health';
  }
});

// üîê Auth Rate Limiting - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö (5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÉ‡∏ô 15 ‡∏ô‡∏≤‡∏ó‡∏µ)
const authLimiter = rateLimit({
  windowMs: 15 * 60 * 1000,   // ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤: 15 ‡∏ô‡∏≤‡∏ó‡∏µ
  max: 5,                     // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: 5 attempts per IP
  message: {
    ok: false,
    message: "‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà" // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏ô‡∏•‡∏¥‡∏°‡∏¥‡∏ï
  },
  standardHeaders: true,
  legacyHeaders: false,
  skipSuccessfulRequests: true // ‡πÑ‡∏°‡πà‡∏ô‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
});

// ‚úèÔ∏è Content Creation Rate Limiting - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ (10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏ï‡πà‡∏≠ ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
const createLimiter = rateLimit({
  windowMs: 60 * 60 * 1000,   // ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤: 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  max: 10,                    // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: 10 posts per IP
  message: {
    ok: false,
    message: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà" // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏ô‡∏•‡∏¥‡∏°‡∏¥‡∏ï
  },
  standardHeaders: true,
  legacyHeaders: false
});

// üí¨ Comment Rate Limiting - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô (30 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏ï‡πà‡∏≠ ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
const commentLimiter = rateLimit({
  windowMs: 60 * 60 * 1000,   // ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤: 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  max: 30,                    // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: 30 comments per IP
  message: {
    ok: false,
    message: "‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ä‡∏∞‡∏•‡∏≠‡∏Å‡∏≤‡∏£‡πÇ‡∏û‡∏™‡∏ï‡πå" // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏ô‡∏•‡∏¥‡∏°‡∏¥‡∏ï
  },
  standardHeaders: true,
  legacyHeaders: false
});

// üö® Report Rate Limiting - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô (5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏ï‡πà‡∏≠ ‡∏ß‡∏±‡∏ô)
const reportLimiter = rateLimit({
  windowMs: 24 * 60 * 60 * 1000, // ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤: 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  max: 5,                         // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: 5 reports per IP
  message: {
    ok: false,
    message: "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ" // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏ô‡∏•‡∏¥‡∏°‡∏¥‡∏ï
  },
  standardHeaders: true,
  legacyHeaders: false
});

/* ==================================================================================
 * üîß MIDDLEWARE CONFIGURATION - ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ middleware ‡∏ï‡πà‡∏≤‡∏á‡πÜ
 * ==================================================================================
 * ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà middleware ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
 */

// üõ°Ô∏è Security Headers - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏î‡πâ‡∏ß‡∏¢ HTTP headers (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏∑‡πà‡∏ô)
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],                                    // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞ same origin
      styleSrc: ["'self'", "'unsafe-inline'", "https://cdn.jsdelivr.net"], // CSS sources
      scriptSrc: ["'self'", "'unsafe-inline'"],                 // JavaScript sources  
      imgSrc: ["'self'", "data:", "https:", "http://localhost:*"], // Image sources
      connectSrc: ["'self'", "http://localhost:*"],              // AJAX/WebSocket connections
      fontSrc: ["'self'", "https://cdn.jsdelivr.net"],          // Font sources
    },
  },
  crossOriginResourcePolicy: { policy: "cross-origin" }         // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï cross-origin requests
}));

// üì¶ Response Compression - ‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î
app.use(compression({
  filter: (req, res) => {
    // ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡∏ñ‡πâ‡∏≤‡∏°‡∏µ header ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î
    if (req.headers['x-no-compression']) return false;
    return compression.filter(req, res);
  },
  level: 6, // Good balance between compression and speed
  threshold: 1024 // Only compress responses > 1KB
}));

// üåê CORS Configuration - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Cross-Origin Resource Sharing (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô static files)
app.use(cors({ 
  origin: ["http://localhost:5173", "http://localhost:5174", "http://localhost:3000"], // URL ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
  credentials: true,                          // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï cookies/credentials
  methods: ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"], // HTTP methods ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
  allowedHeaders: ["Content-Type", "Authorization", "X-Requested-With"], // Headers ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
  exposedHeaders: ["X-RateLimit-Limit", "X-RateLimit-Remaining", "X-RateLimit-Reset"] // Headers ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ client
}));

// üìÅ Static File Serving - ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏û‡∏£‡πâ‡∏≠‡∏° caching
app.use("/static", express.static(path.join(__dirname, "../static"), {
  maxAge: process.env.NODE_ENV === 'production' ? '7d' : '1h', // Cache: 7 ‡∏ß‡∏±‡∏ô‡πÉ‡∏ô production, 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÉ‡∏ô dev
  etag: true,                                 // ‡πÉ‡∏ä‡πâ ETag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö cache validation
  lastModified: true,                         // ‡πÉ‡∏ä‡πâ Last-Modified header
  setHeaders: (res, path, stat) => {
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ CORS headers ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö static files
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Cross-Origin-Resource-Policy', 'cross-origin');
    
    // ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á caching ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
    if (path.endsWith('.jpg') || path.endsWith('.jpeg') || path.endsWith('.png') || path.endsWith('.gif')) {
      res.setHeader('Cache-Control', 'public, max-age=604800'); // Cache ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û 7 ‡∏ß‡∏±‡∏ô
    }
  }
}));

// üõ°Ô∏è ‡πÉ‡∏ä‡πâ general rate limiting ‡∏Å‡∏±‡∏ö API routes ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
app.use('/api', generalLimiter);

// üìù ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• request body ‡πÅ‡∏•‡∏∞ cookies
app.use(express.json({ limit: '10mb' })); // ‡πÅ‡∏õ‡∏•‡∏á JSON body ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î 10MB
app.use(cookieParser()); // ‡πÅ‡∏õ‡∏•‡∏á cookies ‡∏à‡∏≤‡∏Å request

// ‚öôÔ∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ preflight OPTIONS requests ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CORS
app.use((req, res, next) => {
  if (req.method === 'OPTIONS') {
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ CORS headers ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö preflight requests
    res.header('Access-Control-Allow-Origin', req.headers.origin || '*');
    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, PATCH, OPTIONS');
    res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With');
    res.header('Access-Control-Allow-Credentials', 'true');
    return res.sendStatus(200); // ‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ OK ‡∏Å‡∏•‡∏±‡∏ö
  }
  next(); // ‡πÑ‡∏õ‡∏¢‡∏±‡∏á middleware ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
});

/* ==================================================================================
 * üì§ FILE UPLOAD CONFIGURATION - ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
 * ==================================================================================
 * ‡πÉ‡∏ä‡πâ multer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
 * ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ‡∏£‡∏π‡∏õ‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ, ‡∏≠‡∏ß‡∏ï‡∏≤‡∏£‡πå, ‡∏£‡∏π‡∏õ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå
 */
// üìÅ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
const uploadDirs = {
  thread: path.join(__dirname, "../static/thread_images"),    // ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ
  avatar: path.join(__dirname, "../static/avatars")          // ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏£‡∏π‡∏õ‡∏≠‡∏ß‡∏ï‡∏≤‡∏£‡πå
};
// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ (recursive: true = ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå parent ‡∏î‡πâ‡∏ß‡∏¢)
Object.values(uploadDirs).forEach(dir => fs.mkdirSync(dir, { recursive: true }));

// üñºÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ multer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ
const threadStorage = multer.diskStorage({
  destination: (req, file, cb) => cb(null, uploadDirs.thread), // ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
  filename: (req, file, cb) => {
    const ext = path.extname(file.originalname);               // ‡∏î‡∏∂‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå
    cb(null, `thread-${Date.now()}${ext}`);                   // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå: thread-timestamp.ext
  }
});

// üë§ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ multer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏≠‡∏ß‡∏ï‡∏≤‡∏£‡πå
const avatarStorage = multer.diskStorage({
  destination: (req, file, cb) => cb(null, uploadDirs.avatar), // ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á  
  filename: (req, file, cb) => {
    const ext = path.extname(file.originalname);               // ‡∏î‡∏∂‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå
    cb(null, `avatar-${Date.now()}${ext}`);                   // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå: avatar-timestamp.ext
  }
});

// üì§ ‡∏™‡∏£‡πâ‡∏≤‡∏á multer instances ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡πà‡∏≤‡∏á‡πÜ
const uploadThread = multer({ storage: threadStorage }); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ
const uploadAvatar = multer({ storage: avatarStorage }); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏≠‡∏ß‡∏ï‡∏≤‡∏£‡πå

// üí¨ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ multer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå
const commentImageStorage = multer.diskStorage({
  destination: (req, file, cb) => {
    const dir = path.join(__dirname, "../static/comment_images"); // ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏£‡∏π‡∏õ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });                     // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    }
    cb(null, dir);
  },
  filename: (req, file, cb) => {
    const ext = path.extname(file.originalname);                   // ‡∏î‡∏∂‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå
    // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ö‡∏ö unique: comment_timestamp_randomstring.ext
    const filename = `comment_${Date.now()}_${Math.random().toString(36).substring(7)}${ext}`;
    cb(null, filename);
  }
});

// üì∑ ‡∏™‡∏£‡πâ‡∏≤‡∏á multer instance ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
const uploadCommentImage = multer({
  storage: commentImageStorage,                    // ‡πÉ‡∏ä‡πâ storage ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ
  limits: { fileSize: 5 * 1024 * 1024 },         // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå 5MB
  fileFilter: (req, file, cb) => {
    if (file.mimetype.startsWith('image/')) {     // ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
      cb(null, true);
    } else {
      cb(new Error('‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'), false);
    }
  }
});

/* ==================================================================================
 * üíä HEALTH CHECK - ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
 * ================================================================================== 
 */

// ü©∫ API ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå (‡πÑ‡∏°‡πà‡∏°‡∏µ rate limiting)
app.get('/api/health', (req, res) => {
  res.json({ 
    ok: true, 
    time: new Date().toISOString(),
    status: 'Server is running' 
  });
});

/* ==================================================================================
 * üîê AUTHENTICATION APIs - ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
 * ==================================================================================
 * ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå: ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å, ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö, ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
 * ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢: bcrypt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö hash password, JWT ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö session
 */
// üìù API ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà - ‡∏û‡∏£‡πâ‡∏≠‡∏° rate limiting (5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/15‡∏ô‡∏≤‡∏ó‡∏µ)
app.post("/api/register", authLimiter, async (req, res) => {
  try {
    const { username, email, password } = req.body || {};
    
    // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!username || !email || !password) {
      return res.status(400).json({ ok: false, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
    }
    
    // üîí ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
    if (password.length < 6) {
      return res.status(400).json({ ok: false, message: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£" });
    }

    // üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢ bcrypt (salt rounds = 10)
    const passHash = await bcrypt.hash(password, 10);
    
    // üíæ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const user = await prisma.user.create({
      data: {
        username,                                    // ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        email,                                       // ‡∏≠‡∏µ‡πÄ‡∏°‡∏•
        passHash,                                    // ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡πâ‡∏ß
        role: "user",                               // ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: user
        avatarUrl: "/static/avatars/default.png",   // ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      },
      // üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° passHash)
      select: { id: true, username: true, email: true, role: true, avatarUrl: true },
    });

    // üìä ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
    await saveLog(user.id, user.username, 'register', '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà', req);

    return res.json({ ok: true, message: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", user });
  } catch (err) {
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥ (unique constraint)
    if (err.code === "P2002") {
      const field = err.meta?.target?.[0] || "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
      return res.status(409).json({ ok: false, message: `${field} ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß` });
    }
    console.error(err);
    return res.status(500).json({ ok: false, message: "server error" });
  }
});

// ‚úÖ Optimized log saving with batching
let logQueue = [];
const BATCH_SIZE = 10;
const BATCH_TIMEOUT = 5000; // 5 seconds

const saveLog = async (userId, username, action, details, req) => {
  try {
    const logEntry = {
      userId,
      username,
      action,
      details,
      ip: req?.ip || req?.connection?.remoteAddress || 'unknown',
      timestamp: new Date()
    };
    
    logQueue.push(logEntry);
    
    // Process batch when it reaches size limit
    if (logQueue.length >= BATCH_SIZE) {
      await processBatch();
    }
  } catch (error) {
    console.log('Log queue failed:', error.message);
  }
};

// Process log batch
const processBatch = async () => {
  if (logQueue.length === 0) return;
  
  const batch = logQueue.splice(0, BATCH_SIZE);
  try {
    await ActivityLog.insertMany(batch);
  } catch (error) {
    console.log('Batch log save failed:', error.message);
  }
};

// Process remaining logs every 5 seconds
setInterval(processBatch, BATCH_TIMEOUT);

// ‚úÖ API ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö - ‡∏û‡∏£‡πâ‡∏≠‡∏° rate limiting
app.post("/api/login", authLimiter, async (req, res) => {
  const { username, password } = req.body || {};
  const user = await prisma.user.findFirst({ where: { username } });
  if (!user) return res.status(401).json({ ok: false, message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });

  const ok = await bcrypt.compare(password, user.passHash);
  if (!ok) return res.status(401).json({ ok: false, message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });

  const token = jwt.sign(
    { id: user.id, email: user.email, role: user.role },
    process.env.JWT_SECRET || "changeme",
    { expiresIn: "7d" }
  );

  // ‡πÄ‡∏Å‡πá‡∏ö log login
  await saveLog(user.id, user.username, 'login', '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö', req);

  res.json({
    ok: true,
    redirectTo: "/thread",
    user: {
      id: user.id,
      email: user.email,
      role: user.role,
      username: user.username,
      avatarUrl: user.avatarUrl || "/static/avatars/default.png",
      bio: user.bio || "",
      socialLink: user.socialLink || "",
      token
    },
  });
});

/* ---------- threads ---------- */
// ‚úÖ Simple memory cache for threads (5 minutes)
const threadCache = new Map();
const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes

// API ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà - ‡∏û‡∏£‡πâ‡∏≠‡∏° caching ‡πÅ‡∏•‡∏∞ pagination
app.get("/api/threads", async (req, res) => {
  try {
    const categoryId = req.query.category ? parseInt(req.query.category, 10) : null;
    const page = parseInt(req.query.page, 10) || 1;
    const limit = parseInt(req.query.limit, 10) || 20; // Default 20 items per page
    const skip = (page - 1) * limit;
    
    const cacheKey = `threads_${categoryId || 'all'}_${page}_${limit}`;
    
    // Check cache first
    if (threadCache.has(cacheKey)) {
      const cached = threadCache.get(cacheKey);
      if (Date.now() - cached.timestamp < CACHE_DURATION) {
        return res.json(cached.data);
      }
      threadCache.delete(cacheKey);
    }
    
    const where = categoryId ? { categoryId } : {};

    // ‚úÖ Optimized query with pagination
    const [items, total] = await Promise.all([
      prisma.thread.findMany({
        where,
        include: { 
          author: { 
            select: { id: true, email: true, username: true, avatarUrl: true } 
          },
          _count: {
            select: { comments: true }
          }
        },
        orderBy: { createdAt: "desc" },
        take: limit,
        skip: skip
      }),
      prisma.thread.count({ where })
    ]);

    const response = { 
      ok: true, 
      items,
      pagination: {
        page,
        limit,
        total,
        pages: Math.ceil(total / limit)
      }
    };
    
    // Cache the result
    threadCache.set(cacheKey, {
      data: response,
      timestamp: Date.now()
    });
    
    res.json(response);
  } catch (error) {
    console.error('Error fetching threads:', error);
    res.status(500).json({ ok: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ" });
  }
});

// ‚úÖ API ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡πÉ‡∏´‡∏°‡πà - ‡∏û‡∏£‡πâ‡∏≠‡∏° rate limiting
app.post("/api/threads", createLimiter, uploadThread.single("cover"), async (req, res) => {
  const { title, body, tags, categoryId } = req.body;
  try {
    const userId = parseInt(req.body.userId, 10);
    const catId = categoryId ? parseInt(categoryId, 10) : null;
    if (!title?.trim() || !body?.trim() || Number.isNaN(userId) || !catId) {
      return res.status(400).json({ ok: false, message: "invalid input" });
    }

    const thread = await prisma.thread.create({
      data: {
        title: title.trim(),
        body: body.trim(),
        tags: tags?.trim() || null,
        authorId: userId,
        coverUrl: req.file ? `/static/thread_images/${req.file.filename}` : null,
        categoryId: catId
      },
      include: {
        author: {
          select: { id: true, username: true, email: true, avatarUrl: true }
        }
      }
    });

    // ‡πÄ‡∏Å‡πá‡∏ö log ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ
    await saveLog(userId, thread.author.username, 'create_thread', `‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ: ${title}`, req);

    // ‚úÖ Clear thread cache when new thread is created
    clearThreadCache();

    res.json({ ok: true, thread });
  } catch (err) {
    console.error(err);
    res.status(500).json({ ok: false, message: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  }
});

/* ---------- serve React build (production) ---------- */
// ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡πÑ‡∏ü‡∏•‡πå static ‡∏à‡∏≤‡∏Å React build (production mode)
const distPath = path.join(__dirname, "../../client/dist");
if (fs.existsSync(distPath)) {
  app.use(express.static(distPath));
  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ client-side routing (SPA)
  app.get("/*", (req, res) => {
    if (req.path.startsWith("/api/")) return res.status(404).end();
    res.sendFile(path.join(distPath, "index.html"));
  });
}

// ‚úÖ Helper functions to clear caches
function clearThreadCache() {
  for (const key of threadCache.keys()) {
    if (key.startsWith('thread_') || key.startsWith('threads_')) {
      threadCache.delete(key);
    }
  }
}

function clearCommentCache(threadId) {
  for (const key of threadCache.keys()) {
    if (key.startsWith(`comments_${threadId}_`)) {
      threadCache.delete(key);
    }
  }
}

// API ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡∏ï‡∏≤‡∏° ID ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô - ‡∏û‡∏£‡πâ‡∏≠‡∏° caching
app.get("/api/threads/:id", async (req, res) => {
  try {
    const id = parseInt(req.params.id, 10);
    if (Number.isNaN(id)) return res.status(400).json({ ok: false, message: "bad id" });

    const cacheKey = `thread_${id}`;
    
    // Check cache first
    if (threadCache.has(cacheKey)) {
      const cached = threadCache.get(cacheKey);
      if (Date.now() - cached.timestamp < CACHE_DURATION) {
        return res.json(cached.data);
      }
      threadCache.delete(cacheKey);
    }

    // ‚úÖ Optimized query with comment count
    const t = await prisma.thread.findUnique({
      where: { id },
      include: { 
        author: { 
          select: { id: true, email: true, username: true, avatarUrl: true } 
        },
        _count: {
          select: { comments: true }
        }
      },
    });
    
    if (!t) return res.status(404).json({ ok: false, message: "not found" });

    const response = { ok: true, thread: t };
    
    // Cache the result
    threadCache.set(cacheKey, {
      data: response,
      timestamp: Date.now()
    });

    res.json(response);
  } catch (error) {
    console.error('Error fetching thread:', error);
    res.status(500).json({ ok: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ" });
  }
});

// API ‡∏•‡∏ö‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠ admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
app.delete("/api/threads/:id", async (req, res) => {
  const id = parseInt(req.params.id, 10);
  const auth = req.headers.authorization || "";
  const token = auth.replace(/^Bearer\s+/i, "");
  let user = null;
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT token
    user = jwt.verify(token, process.env.JWT_SECRET || "changeme");
  } catch {
    return res.status(401).json({ ok: false, message: "Invalid token" });
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
  const thread = await prisma.thread.findUnique({ where: { id } });
  if (!thread) return res.status(404).json({ ok: false, message: "not found" });

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠ admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
  if (thread.authorId !== user.id && user.role !== "admin") {
    return res.status(403).json({ ok: false, message: "no permission" });
  }

  // ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô
  await prisma.comment.deleteMany({ where: { threadId: id } });
  // ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏•‡∏ö‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ
  await prisma.thread.delete({ where: { id } });

  // ‚úÖ Clear thread cache when thread is deleted
  clearThreadCache();

  res.json({ ok: true });
});

// API ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ - ‡∏û‡∏£‡πâ‡∏≠‡∏° pagination ‡πÅ‡∏•‡∏∞ caching
app.get("/api/threads/:id/comments", async (req, res) => {
  try {
    const threadId = parseInt(req.params.id, 10);
    if (Number.isNaN(threadId)) return res.status(400).json({ ok: false, message: "bad id" });
    
    const page = parseInt(req.query.page, 10) || 1;
    const limit = parseInt(req.query.limit, 10) || 50; // Default 50 comments per page
    const skip = (page - 1) * limit;
    
    const cacheKey = `comments_${threadId}_${page}_${limit}`;
    
    // Check cache first
    if (threadCache.has(cacheKey)) {
      const cached = threadCache.get(cacheKey);
      if (Date.now() - cached.timestamp < CACHE_DURATION) {
        return res.json(cached.data);
      }
      threadCache.delete(cacheKey);
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á (cached)
    const threadCacheKey = `thread_${threadId}`;
    let thread = null;
    
    if (threadCache.has(threadCacheKey)) {
      const cached = threadCache.get(threadCacheKey);
      if (Date.now() - cached.timestamp < CACHE_DURATION) {
        thread = cached.data.thread;
      }
    }
    
    if (!thread) {
      thread = await prisma.thread.findUnique({ where: { id: threadId } });
      if (!thread) return res.status(404).json({ ok: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ" });
    }

    // ‚úÖ Optimized query with pagination
    const [items, total] = await Promise.all([
      prisma.comment.findMany({
        where: { threadId },
        include: { 
          author: { 
            select: { id: true, username: true, email: true, avatarUrl: true } 
          } 
        },
        orderBy: { createdAt: "asc" },
        take: limit,
        skip: skip
      }),
      prisma.comment.count({ where: { threadId } })
    ]);

    const response = { 
      ok: true, 
      items,
      pagination: {
        page,
        limit,
        total,
        pages: Math.ceil(total / limit)
      }
    };
    
    // Cache the result
    threadCache.set(cacheKey, {
      data: response,
      timestamp: Date.now()
    });

    res.json(response);
  } catch (error) {
    console.error('Error fetching comments:', error);
    res.status(500).json({ ok: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå" });
  }
});

// ‚úÖ API ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà - ‡∏û‡∏£‡πâ‡∏≠‡∏° rate limiting
app.post("/api/threads/:id/comments", commentLimiter, uploadCommentImage.single("image"), async (req, res) => {
  try {
    const threadId = parseInt(req.params.id, 10);
    const { body } = req.body || {};
    
    // ‡∏î‡∏∂‡∏á user ‡∏à‡∏≤‡∏Å token
    const auth = req.headers.authorization || "";
    const token = auth.replace(/^Bearer\s+/i, "");
    let user = null;
    try {
      user = jwt.verify(token, process.env.JWT_SECRET || "changeme");
    } catch {
      return res.status(401).json({ ok: false, message: "Invalid token" });
    }
    
    if (!body?.trim() && !req.file) {
      return res.status(400).json({ ok: false, message: "‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û" });
    }

    const thread = await prisma.thread.findUnique({ where: { id: threadId } });
    if (!thread) return res.status(404).json({ ok: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ" });

    const comment = await prisma.comment.create({
      data: {
        body: body?.trim() || "",
        imageUrl: req.file ? `/static/comment_images/${req.file.filename}` : null,
        threadId,
        authorId: user.id,
      },
      include: {
        author: { select: { id: true, username: true, email: true, avatarUrl: true } }
      }
    });

    // Log comment creation
    await saveLog(user.id, comment.author.username, "create_comment", `‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô: ${thread.title}`, req);

    // ‚úÖ Clear comment cache when new comment is created
    clearCommentCache(threadId);

    res.json({ ok: true, comment });
  } catch (err) {
    console.error(err);
    res.status(500).json({ ok: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
  }
});

// API ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠ admin
app.delete("/api/comments/:id", async (req, res) => {
  const commentId = parseInt(req.params.id, 10);
  if (Number.isNaN(commentId)) return res.status(400).json({ ok: false, message: "Invalid comment ID" });
  
  const auth = req.headers.authorization || "";
  const token = auth.replace(/^Bearer\s+/i, "");
  let user = null;
  try {
    user = jwt.verify(token, process.env.JWT_SECRET || "changeme");
  } catch {
    return res.status(401).json({ ok: false, message: "Unauthorized" });
  }

  try {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå
    const comment = await prisma.comment.findUnique({ where: { id: commentId } });
    if (!comment) return res.status(404).json({ ok: false, message: "Comment not found" });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠ admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
    if (comment.authorId !== user.id && user.role !== "admin") {
      return res.status(403).json({ ok: false, message: "Permission denied" });
    }

    // ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (comment.imageUrl) {
      try {
        const imagePath = path.join(__dirname, "..", comment.imageUrl);
        if (fs.existsSync(imagePath)) {
          fs.unlinkSync(imagePath);
        }
      } catch (err) {
        console.log("Failed to delete comment image:", err.message);
      }
    }

    // ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå
    await prisma.comment.delete({ where: { id: commentId } });

    // ‡πÄ‡∏Å‡πá‡∏ö log ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå
    await saveLog(user.id, user.email, 'delete_comment', `‡∏•‡∏ö‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå ID: ${commentId}`, req);

    res.json({ ok: true, message: "‡∏•‡∏ö‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (err) {
    console.error(err);
    return res.status(500).json({ ok: false, message: "Server error" });
  }
});

// API ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á
app.put("/api/comments/:id", uploadCommentImage.single("image"), async (req, res) => {
  const commentId = parseInt(req.params.id, 10);
  if (Number.isNaN(commentId)) return res.status(400).json({ ok: false, message: "Invalid comment ID" });
  
  const auth = req.headers.authorization || "";
  const token = auth.replace(/^Bearer\s+/i, "");
  let user = null;
  try {
    user = jwt.verify(token, process.env.JWT_SECRET || "changeme");
  } catch {
    return res.status(401).json({ ok: false, message: "Unauthorized" });
  }

  try {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå
    const existingComment = await prisma.comment.findUnique({ where: { id: commentId } });
    if (!existingComment) return res.status(404).json({ ok: false, message: "Comment not found" });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
    if (existingComment.authorId !== user.id) {
      return res.status(403).json({ ok: false, message: "Permission denied" });
    }

    const { body } = req.body;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    if (!body?.trim() && !req.file) {
      return res.status(400).json({ ok: false, message: "Body or image is required" });
    }

    let updateData = {};
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï body ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (body?.trim()) {
      updateData.body = body.trim();
    }

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà
    if (req.file) {
      // ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
      if (existingComment.imageUrl) {
        try {
          const oldImagePath = path.join(__dirname, "..", existingComment.imageUrl);
          if (fs.existsSync(oldImagePath)) {
            fs.unlinkSync(oldImagePath);
          }
        } catch (err) {
          console.log("Failed to delete old comment image:", err.message);
        }
      }
      updateData.imageUrl = `/static/comment_images/${req.file.filename}`;
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå
    const updatedComment = await prisma.comment.update({
      where: { id: commentId },
      data: updateData,
      include: {
        author: {
          select: { id: true, username: true, email: true, avatarUrl: true }
        }
      }
    });

    // ‡πÄ‡∏Å‡πá‡∏ö log ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå
    await saveLog(user.id, user.email, 'edit_comment', `‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå ID: ${commentId}`, req);

    res.json({ ok: true, comment: updatedComment, message: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (err) {
    console.error(err);
    return res.status(500).json({ ok: false, message: "Server error" });
  }
});

/* ---------- users ---------- */
// API ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ - username, bio, socialLink, avatar
app.patch("/api/users/:id", uploadAvatar.single("avatar"), async (req, res) => {
  const id = parseInt(req.params.id, 10);
  const { username, bio, socialLink } = req.body;

  try {
    let avatarUrl = undefined;
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î avatar ‡πÉ‡∏´‡∏°‡πà
    if (req.file) {
      avatarUrl = `/static/avatars/${req.file.filename}`;
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤)
    const user = await prisma.user.update({
      where: { id },
      data: {
        username: username || undefined,
        avatarUrl: avatarUrl || undefined,
        bio: bio || undefined,
        socialLink: socialLink || undefined
      },
      select: {
        id: true,
        email: true,
        username: true,
        avatarUrl: true,
        role: true,
        bio: true,
        socialLink: true
      }
    });

    res.json({ ok: true, user });
  } catch (err) {
    console.error(err);
    res.status(500).json({ ok: false, message: "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  }
});

// API ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô - ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô
app.post("/api/users/:id/change-password", async (req, res) => {
  const id = parseInt(req.params.id, 10);
  const { oldPassword, newPassword } = req.body || {};

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  if (!oldPassword || !newPassword) {
    return res.status(400).json({ ok: false, message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö" });
  }
  if (newPassword.length < 6) {
    return res.status(400).json({ ok: false, message: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£" });
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
  const user = await prisma.user.findUnique({ where: { id } });
  if (!user) return res.status(404).json({ ok: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°
  const ok = await bcrypt.compare(oldPassword, user.passHash);
  if (!ok) return res.status(401).json({ ok: false, message: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });

  // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
  const passHash = await bcrypt.hash(newPassword, 10);
  await prisma.user.update({ where: { id }, data: { passHash } });

  res.json({ ok: true, message: "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
});

// API ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ admin
app.get("/api/users", async (req, res) => {
  const auth = req.headers.authorization || "";
  const token = auth.replace(/^Bearer\s+/i, "");
  let user = null;
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT token
    user = jwt.verify(token, process.env.JWT_SECRET || "changeme");
  } catch {
    return res.status(401).json({ ok: false, message: "Invalid token" });
  }
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô admin
  if (user.role !== "admin") return res.status(403).json({ ok: false, message: "forbidden" });

  // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ user ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° password hash)
  const users = await prisma.user.findMany({
    select: { id: true, email: true, username: true, role: true }
  });
  res.json({ ok: true, users });
});

// API ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô role ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (user/admin) - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ admin
app.patch("/api/users/:id/role", async (req, res) => {
  const auth = req.headers.authorization || "";
  const token = auth.replace(/^Bearer\s+/i, "");
  let user = null;
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT token
    user = jwt.verify(token, process.env.JWT_SECRET || "changeme");
  } catch {
    return res.status(401).json({ ok: false, message: "Invalid token" });
  }
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô admin
  if (user.role !== "admin") return res.status(403).json({ ok: false, message: "forbidden" });

  const id = parseInt(req.params.id, 10);
  const { role } = req.body;
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ role ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  if (!["user", "admin"].includes(role)) {
    return res.status(400).json({ ok: false, message: "role ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
  }

  try {
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï role ‡∏Ç‡∏≠‡∏á user
    await prisma.user.update({
      where: { id },
      data: { role }
    });
    res.json({ ok: true });
  } catch (err) {
    console.error(err);
    res.status(500).json({ ok: false, message: "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô role ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  }
});

/* ---------- categories ---------- */
// API ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
app.get("/api/categories", async (req, res) => {
  // ‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠
  const categories = await prisma.category.findMany({ orderBy: { name: "asc" } });
  res.json(categories);
});

// API ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡∏°‡πà - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ admin
app.post("/api/categories", auth, async (req, res) => {
  console.log("BODY", req.body, "USER", req.user);
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô admin
  if (!req.user || req.user.role !== "admin") {
    return res.status(403).json({ ok: false, message: "forbidden" });
  }
  const { name } = req.body;
  if (!name) return res.status(400).json({ ok: false, message: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà" });
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡∏°‡πà
  const cat = await prisma.category.create({ data: { name } });
  res.json({ ok: true, category: cat });
});

// API ‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ admin
app.delete("/api/categories/:id", auth, async (req, res) => {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô admin
  if (!req.user || req.user.role !== "admin") {
    return res.status(403).json({ ok: false, message: "forbidden" });
  }
  const id = parseInt(req.params.id, 10);
  if (Number.isNaN(id)) return res.status(400).json({ ok: false, message: "bad id" });

  try {
    // ‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ‡∏à‡∏∞ set categoryId ‡πÄ‡∏õ‡πá‡∏ô null ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
    await prisma.category.delete({ where: { id } });
    res.json({ ok: true });
  } catch (err) {
    console.error(err);
    res.status(500).json({ ok: false, message: "‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  }
});

/* ---------- reports ---------- */
// ‚úÖ API ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ - ‡∏û‡∏£‡πâ‡∏≠‡∏° rate limiting
app.post("/api/reports", reportLimiter, async (req, res) => {
  const { threadId, threadTitle, reason } = req.body;
  const auth = req.headers.authorization || "";
  const token = auth.replace(/^Bearer\s+/i, "");
  let user = null;
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT token
    user = jwt.verify(token, process.env.JWT_SECRET || "changeme");
  } catch {
    return res.status(401).json({ ok: false, message: "Invalid token" });
  }
  if (!threadId || !reason) return res.status(400).json({ ok: false, message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö" });
  
  const report = await Report.create({
    threadId,
    threadTitle,
    reporterId: user.id,
    reporterEmail: user.email,
    reason
  });

  // ‡πÄ‡∏Å‡πá‡∏ö log ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ
  await saveLog(user.id, user.email, 'report', `‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ: ${threadTitle}`, req);

  res.json({ ok: true, report });
});

// API ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ admin
app.get("/api/reports", async (req, res) => {
  const auth = req.headers.authorization || "";
  const token = auth.replace(/^Bearer\s+/i, "");
  let user = null;
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT token
    user = jwt.verify(token, process.env.JWT_SECRET || "changeme");
  } catch {
    return res.status(401).json({ ok: false, message: "Invalid token" });
  }
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô admin
  if (user.role !== "admin") return res.status(403).json({ ok: false, message: "forbidden" });
  
  // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å MongoDB ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  const reports = await Report.find().sort({ createdAt: -1 });
  res.json({ ok: true, reports });
});

// API ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ admin
app.put("/api/reports/:id", async (req, res) => {
  const auth = req.headers.authorization || "";
  const token = auth.replace(/^Bearer\s+/i, "");
  let user = null;
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT token
    user = jwt.verify(token, process.env.JWT_SECRET || "changeme");
  } catch {
    return res.status(401).json({ ok: false, message: "Invalid token" });
  }
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô admin
  if (user.role !== "admin") return res.status(403).json({ ok: false, message: "forbidden" });

  const { reason } = req.body;
  if (!reason || !reason.trim()) {
    return res.status(400).json({ ok: false, message: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô" });
  }

  try {
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏ô MongoDB
    const report = await Report.findByIdAndUpdate(
      req.params.id, 
      { reason: reason.trim() }, 
      { new: true }
    );
    
    if (!report) {
      return res.status(404).json({ ok: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô" });
    }

    res.json({ ok: true, report });
  } catch (error) {
    console.error("Error updating report:", error);
    res.status(500).json({ ok: false, message: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  }
});

// API ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ admin
app.delete("/api/reports/:id", async (req, res) => {
  const auth = req.headers.authorization || "";
  const token = auth.replace(/^Bearer\s+/i, "");
  let user = null;
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT token
    user = jwt.verify(token, process.env.JWT_SECRET || "changeme");
  } catch {
    return res.status(401).json({ ok: false, message: "Invalid token" });
  }
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô admin
  if (user.role !== "admin") return res.status(403).json({ ok: false, message: "forbidden" });

  try {
    // ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å MongoDB
    const report = await Report.findByIdAndDelete(req.params.id);
    
    if (!report) {
      return res.status(404).json({ ok: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô" });
    }

    res.json({ ok: true, message: "‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (error) {
    console.error("Error deleting report:", error);
    res.status(500).json({ ok: false, message: "‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  }
});

/* ---------- admin ---------- */
// API ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• dashboard ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin - ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡πà‡∏≤‡∏á‡πÜ
app.get("/api/admin/dashboard", async (req, res) => {
  const auth = req.headers.authorization || "";
  const token = auth.replace(/^Bearer\s+/i, "");
  let user = null;
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT token
    user = jwt.verify(token, process.env.JWT_SECRET || "changeme");
  } catch {
    return res.status(401).json({ ok: false, message: "Invalid token" });
  }
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô admin
  if (user.role !== "admin") return res.status(403).json({ ok: false, message: "forbidden" });

  // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô user ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const userCount = await prisma.user.count();
  // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const threadCount = await prisma.thread.count();

  // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô (7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
  const users = await prisma.user.findMany({
    select: { createdAt: true },
    orderBy: { createdAt: 'desc' },
    take: 100, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏° 7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  });

  // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
  const dailyUsersMap = new Map();
  users.forEach(user => {
    const date = user.createdAt.toISOString().slice(0, 10);
    dailyUsersMap.set(date, (dailyUsersMap.get(date) || 0) + 1);
  });

  // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà 7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  const dailyUsers = Array.from(dailyUsersMap.entries())
    .map(([date, count]) => ({ date, count }))
    .sort((a, b) => b.date.localeCompare(a.date))
    .slice(0, 7);

  res.json({
    ok: true,
    userCount,
    threadCount,
    dailyUsers
  });
});

// API ‡∏î‡∏π logs (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ admin)
app.get("/api/logs", async (req, res) => {
  const auth = req.headers.authorization || "";
  const token = auth.replace(/^Bearer\s+/i, "");
  let user = null;
  try {
    user = jwt.verify(token, process.env.JWT_SECRET || "changeme");
  } catch {
    return res.status(401).json({ ok: false, message: "Invalid token" });
  }
  if (user.role !== "admin") return res.status(403).json({ ok: false, message: "forbidden" });

  const { page = 1, limit = 50 } = req.query;
  
  const logs = await ActivityLog.find()
    .sort({ timestamp: -1 })
    .limit(parseInt(limit))
    .skip((parseInt(page) - 1) * parseInt(limit));

  const total = await ActivityLog.countDocuments();

  res.json({ 
    ok: true, 
    logs, 
    pagination: { page: parseInt(page), limit: parseInt(limit), total }
  });
});

// üîç API ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏• - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Forgot Password Step 1)
app.post("/api/verify-email", authLimiter, async (req, res) => {
  try {
    const { email } = req.body;

    // üìù ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!email) {
      return res.status(400).json({ 
        ok: false, 
        message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏µ‡πÄ‡∏°‡∏•" 
      });
    }

    // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return res.status(400).json({ 
        ok: false, 
        message: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" 
      });
    }

    // üìä ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ user ‡∏à‡∏≤‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏ô database
    const user = await prisma.user.findUnique({ 
      where: { email: email.toLowerCase().trim() },
      select: { id: true, email: true, username: true } // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    });

    if (!user) {
      return res.status(404).json({ 
        ok: false, 
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" 
      });
    }

    // üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å activity log
    await ActivityLog.create({
      action: "email_verify_attempt",
      userId: user.id,
      email: user.email,
      userAgent: req.get('User-Agent'),
      ip: req.ip,
      timestamp: new Date()
    });

    // ‚úÖ ‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡πâ‡∏ß - ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô (‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î)
    res.json({ 
      ok: true, 
      message: "‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ",
      email: email.toLowerCase().trim()
    });
  } catch (error) {
    console.error("Error in verify-email:", error);
    res.status(500).json({ 
      ok: false, 
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•" 
    });
  }
});

// üîí API ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô - ‡∏£‡∏±‡∏ö email ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà (Forgot Password Step 2)
app.post("/api/forgot-password", authLimiter, async (req, res) => {
  try {
    const { email, newPassword } = req.body;

    // üìù ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!email || !newPassword) {
      return res.status(400).json({ 
        ok: false, 
        message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà" 
      });
    }

    // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    if (newPassword.length < 6) {
      return res.status(400).json({ 
        ok: false, 
        message: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£" 
      });
    }

    // üìä ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ user ‡∏à‡∏≤‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•
    const user = await prisma.user.findUnique({ 
      where: { email: email.toLowerCase().trim() } 
    });
    
    if (!user) {
      return res.status(404).json({ 
        ok: false, 
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ" 
      });
    }

    // üîí ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const passHash = await bcrypt.hash(newPassword, 12); // ‡πÄ‡∏û‡∏¥‡πà‡∏° salt rounds ‡πÄ‡∏õ‡πá‡∏ô 12
    await prisma.user.update({ 
      where: { email: email.toLowerCase().trim() }, 
      data: { 
        passHash // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
      } 
    });

    // üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å activity log
    await ActivityLog.create({
      action: "password_reset_success",
      userId: user.id,
      email: user.email,
      userAgent: req.get('User-Agent'),
      ip: req.ip,
      timestamp: new Date()
    });

    // ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    res.json({ 
      ok: true, 
      message: "‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà" 
    });
  } catch (error) {
    console.error("Error in forgot-password:", error);
    res.status(500).json({ 
      ok: false, 
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" 
    });
  }
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö middleware
function auth(req, res, next) {
  const authHeader = req.headers.authorization;
  if (!authHeader) return res.status(401).json({ ok: false, message: "No token" });
  const token = authHeader.split(" ")[1]; // Bearer <token>
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞ decode JWT token
    req.user = jwt.verify(token, process.env.JWT_SECRET || "changeme");
    next(); // ‡πÑ‡∏õ‡∏¢‡∏±‡∏á middleware/route ‡∏ï‡πà‡∏≠‡πÑ‡∏õ
  } catch (e) {
    res.status(401).json({ ok: false, message: "Invalid token" });
  }
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server running at http://localhost:${PORT}`));
