/*
 * ==================================================================================
 * ‚úèÔ∏è EDIT THREAD PAGE - ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ
 * ==================================================================================
 * 
 * üéØ ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå: ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
 * üîê ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢: ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ
 * üé® ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠, ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤, ‡πÅ‡∏ó‡πá‡∏Å, ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡∏û‡∏£‡πâ‡∏≠‡∏° preview
 * 
 * ==================================================================================
 */

import { useState, useEffect } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { useAuth } from "../auth";
import Header from "./Header";

// üåê ‡∏Å‡∏≥‡∏´‡∏ô‡∏î API URL ‡∏à‡∏≤‡∏Å environment variable
const API = import.meta.env.VITE_API_URL || "http://localhost:3000";

export default function EditThread() {
  // üõ†Ô∏è Router hooks ‡πÅ‡∏•‡∏∞ authentication
  const { id } = useParams();                    // ‡∏£‡∏±‡∏ö thread ID ‡∏à‡∏≤‡∏Å URL parameter
  const nav = useNavigate();                     // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡∏£‡πá‡∏à
  const { user } = useAuth();                    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  
  // üìù Form states - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const [title, setTitle] = useState("");        // ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ
  const [body, setBody] = useState("");          // ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ
  const [tags, setTags] = useState("");          // ‡πÅ‡∏ó‡πá‡∏Å‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ
  const [cover, setCover] = useState(null);      // ‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà
  const [preview, setPreview] = useState("");    // URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö preview ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  
  // üéõÔ∏è UI control states
  const [loading, setLoading] = useState(true);     // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡πÄ‡∏î‡∏¥‡∏°
  const [submitting, setSubmmiting] = useState(false); // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç

  // üì° ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠ component mount
  useEffect(() => {
    (async () => {
      try {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡∏à‡∏≤‡∏Å API
        const res = await fetch(`${API}/api/threads/${id}`);
        const data = await res.json();
        if (!res.ok) throw new Error(data.message || "‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

        // üîê ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        if (data.thread.authorId !== user?.id) {
          alert("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡∏ô‡∏µ‡πâ");
          nav("/");                              // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á
          return;
        }

        // üìù ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏•‡∏á‡πÉ‡∏ô form
        setTitle(data.thread.title || "");
        setBody(data.thread.body || "");
        setTags(data.thread.tags || "");
        
        // üñºÔ∏è ‡∏ï‡∏±‡πâ‡∏á preview ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if (data.thread.coverUrl) {
          setPreview(`${API}${data.thread.coverUrl}`);
        }
      } catch (err) {
        alert(err.message);
        nav("/");                                // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      } finally {
        setLoading(false);                       // ‡∏´‡∏¢‡∏∏‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ loading
      }
    })();
  }, [id, user?.id, nav]);

  // üñºÔ∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏õ‡∏Å
  const handleCoverChange = (e) => {
    const file = e.target.files[0];              // ‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    if (file) {
      setCover(file);                            // ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡πÑ‡∏õ server
      setPreview(URL.createObjectURL(file));     // ‡∏™‡∏£‡πâ‡∏≤‡∏á preview URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ
    }
  };

  // ‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (submitting) return;
    setSubmmiting(true);

    try {
      const formData = new FormData();
      formData.append("title", title.trim());
      formData.append("body", body.trim());
      formData.append("tags", tags.trim());
      formData.append("userId", user.id);
      if (cover) {
        formData.append("cover", cover);
      }

      const res = await fetch(`${API}/api/threads/${id}`, {
        method: "PATCH",
        headers: {
          "Authorization": `Bearer ${user.token}`
        },
        body: formData
      });

      const data = await res.json();
      if (!res.ok) throw new Error(data.message || "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

      nav("/");
    } catch (err) {
      alert(err.message);
    } finally {
      setSubmmiting(false);
    }
  };

  if (loading) return <div className="p-4 text-center">Loading...</div>;

  return (
    <>
      <Header />
      <div className="container my-4">
        <div className="card">
          <div className="card-body">
            <h4 className="card-title mb-4">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ</h4>
            <form onSubmit={handleSubmit}>
              <div className="mb-3">
                <label className="form-label">‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠</label>
                <input
                  type="text"
                  className="form-control"
                  value={title}
                  onChange={e => setTitle(e.target.value)}
                  required
                  maxLength={120}
                />
                <small className="text-muted">‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {120 - title.length} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£</small>
              </div>

              <div className="mb-3">
                <label className="form-label">‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤</label>
                <textarea
                  className="form-control"
                  rows={8}
                  value={body}
                  onChange={e => setBody(e.target.value)}
                  required
                  maxLength={5000}
                />
                <small className="text-muted">‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {5000 - body.length} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£</small>
              </div>

              <div className="mb-3">
                <label className="form-label">‡πÅ‡∏ó‡πá‡∏Å</label>
                <input
                  type="text"
                  className="form-control"
                  value={tags}
                  onChange={e => setTags(e.target.value)}
                  placeholder="‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ , ‡πÄ‡∏ä‡πà‡∏ô react, javascript"
                />
              </div>

              <div className="mb-3">
                <label className="form-label">‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</label>
                {preview && (
                  <div className="mb-2">
                    <img
                      src={preview}
                      alt="Preview"
                      className="img-fluid rounded"
                      style={{ maxHeight: "200px" }}
                    />
                  </div>
                )}
                <input
                  type="file"
                  className="form-control"
                  accept="image/*"
                  onChange={handleCoverChange}
                />
              </div>

              <div className="text-end">
                <button
                  type="button"
                  className="btn btn-outline-secondary me-2"
                  onClick={() => nav("/")}
                >
                  ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </button>
                <button 
                  type="submit"
                  className="btn btn-primary"
                  disabled={submitting}
                >
                  {submitting ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..." : "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"}
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </>
  );
}